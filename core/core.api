service core-api {
	// 用户登录
	@handler UserLogin
	post /user/login(LoginRequest) returns (LoginResponse)
	
	// 用户详情
	@handler UserDetail
	get /user/detail(UserDetailRequest) returns (UserDetailResponse)
	
	// 邮箱注册
	@handler MailRegister
	post /mail/register(MailRegisterRequest) returns (MailRegisterResponse)
	
	// 用户注册
	@handler UserRegister
	post /user/register(UserRegisterRequest) returns (UserRegisterResponse)
	
	// 获取分享的文件信息
	@handler GetShareBasicDetail
	get /share(ShareBasicDetailRequest) returns (ShareBasicDetailResponse)
	
	// 令牌刷新
	@handler RefreshToken
	put /refresh returns(RefreshTokenResponse)
}

@server (
	// 鉴权中间件
	middleware: AuthMiddleware
)
service core-api {
	
	// 文件上传
	@handler FileUpload
	post /file/upload(FileUploadRequest) returns(FileUploadResponse)
	
	// 用户文件关联存储
	@handler UserRepositorySave
	post /user/repository/save(UserRepositoryRequest) returns(UserRepositoryResponse)
	
	// 用户文件列表
	@handler UserFileList
	get /user/repository(UserFileListRequest) returns(UserFileListResponse)
	
	// 文件名称修改
	@handler EditFileName
	put /user/repository(EditFileNameRequest) returns(EditFileNameResponse)
	
	// 用户文件夹创建
	@handler UserFolderCreate
	post /user/folder(UserFolderCreateRequest) returns(UserFolderCreateResponse)
	
	// 用户文件删除
	@handler UserFileDel
	delete /user/file(UserFileDelRequest) returns(UserFileDelResponse)
	
	// 用户文件移动
	@handler UserFileMove
	post /user/file/move(UserFileMoveRequest) returns(UserFileMoveResponse)
	
	// 创建文件分享
	@handler ShareBasicCreate
	post /share(ShareBasicCreateRequest) returns(ShareBasicCreateResponse)
	
	// 获取分享的文件列表
	@handler ShareBasicList
	get /share/list(ShareBasicListRequest) returns(ShareBasicListResponse)
	
	// 文件上传基本信息处理
	@handler FileUploadPrepare
	post /file/upload/prepare(FileUploadPrepareRequest) returns(FileUploadPrepareResponse)
	
	// 文件的分片上传
	@handler FileChunkUpload
	post /file/chunk/upload(FileChunkUploadRequest) returns(FileChunkUploadResponse)
	
	// 文件分片上传完成
	@handler FileChunkSuccess
	post /file/chunk/success(FileChunkSuccessRequest) returns(FileChunkSuccessResponse)
}

type (
	FileChunkSuccessRequest {
		Parts    []*PartObject `json:"parts"`
		Key      string        `json:"key"`
		UploadId string        `json:"upload_id"`
	}
	FileChunkSuccessResponse {
	}

	PartObject {
		PartNumber int    `json:"part_number"`
		ETag       string `json:"e_tag"`
	}
)

type (
	FileChunkUploadRequest {
		// 以表单的形式传参数
		// Key string
		// UploadId string
		// PartNumber int
	}

	FileChunkUploadResponse {
		ETag string `json:"e_tag"`
	}
)

type (
	FileUploadPrepareRequest {
		Md5  string `json:"md5"`
		Name string `json:"name"`
		Ext  string `json:"ext"`
	}
	FileUploadPrepareResponse {
		Identity string `json:"identity"`
		UploadId string `json:"uploadId"`
		Key      string `json:"key"`
	}
)

type (
	RefreshTokenResponse {
		Token        string `json:"token"`
		RefreshToken string `json:"refresh_token"`
	}
)

type (
	ShareBasicListRequest {
		Page int `json:"page,optional"`
		Size int `json:"size,optional"`
	}

	ShareBasicListResponse {
		ShareBasic []*ShareFile `json:"list"`
		Count      int          `json:"count"`
	}

	ShareFile {
		Name     string `json:"name"`
		Ext      string `json:"ext"`
		Path     string `json:"path"`
		Size     int    `json:"size"`
		ClickNum int    `json:"click_num"`
	}
)

type (
	ShareBasicDetailRequest {
		Identity string `json:"identity"`
	}

	ShareBasicDetailResponse {
		Name               string `json:"name"`
		Ext                string `json:"ext"`
		Size               int    `json:"size"`
		Path               string `json:"path"`
		RepositoryIdentity string `json:"respository_identity"`
	}
)

type (
	ShareBasicCreateRequest {
		RepositoryIdentity string `json:"repository_identity"`
		ExpiredTime        int    `json:"expired_time"`
	}

	ShareBasicCreateResponse {
		Identity string `json:"identity"`
	}
)

type (
	UserFileMoveRequest {
		Identity string `json:"identity"`
		ParentId int    `json:"parent_id"`
	}
	UserFileMoveResponse {
	}
)

type UserFileDelRequest {
	Identity string `json:"identity"`
}

type UserFileDelResponse {
}

type UserFolderCreateRequest {
	ParentId int    `json:"parent_id"`
	Name     string `json:"name"`
}

type UserFolderCreateResponse {
	Identity string `json:"identity"`
}

type EditFileNameRequest {
	Identity string `json:"identity"` // 文件的唯一标识
	Name     string `json:"name"`     // 文件新名称
}

type EditFileNameResponse {
}

type UserFileListRequest {
	Id   int `json:"id,optional"` // 文件夹id
	Page int `json:"page,optional"`
	Size int `json:"size,optional"`
}

type UserFileListResponse {
	List  []*UserFile `json:"list"`
	Count int         `json:"count"`
}

type UserFile {
	Id                 int    `json:"id"`
	Name               string `json:"name"`
	Ext                string `json:"ext"`
	Size               int    `json:"size"`
	Path               string `json:"path"`
	Identity           string `json:"identity"`
	RepositoryIdentity string `json:"repository_identity"`
}

type UserRepositoryRequest {
	ParentId           int    `json:"parent_id"`
	RepositoryIdentity string `json:"repository_identity"`
	Ext                string `json:"ext"`
	Name               string `json:"name"`
}

type UserRepositoryResponse {
	Identity string `json:"identity"`
}

type FileUploadRequest {
	Hash string `json:"hash,optional"`
	Name string `json:"name,optional"`
	Ext  string `json:"ext,optional"`
	Size int64  `json:"size,optional"`
	Path string `json:"path,optional"`
}

type FileUploadResponse {
	Identity string `json:"identity"`
	Name     string `json:"name,optional"`
	Ext      string `json:"ext,optional"`
	Size     int64  `json:"size,optional"`
	Path     string `json:"path,optional"`
}

type UserRegisterRequest {
	Code     string `json:"code"`
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

type UserRegisterResponse {
	Identity string `json:"identity"`
	Name     string `json:"name"`
	Email    string `json:"email"`
}

type MailRegisterRequest {
	Email string `json:"email"`
}

type MailRegisterResponse {
}

type UserDetailRequest {
	Identity string `json:"identity"`
}
type UserDetailResponse {
	Name  string `json:"name"`
	Email string `json:"email"`
}

type LoginRequest {
	Name     string `json:"name"`
	Password string `json:"password"`
}

type LoginResponse {
	Token        string `json:"token"`
	RefreshToken string `json:"refresh_token"`
}